//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_EntityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.Entity), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("OnRecycle", OnRecycle);
		L.RegFunction("OnShow", OnShow);
		L.RegFunction("OnHide", OnHide);
		L.RegFunction("OnAttached", OnAttached);
		L.RegFunction("OnDetached", OnDetached);
		L.RegFunction("OnAttachTo", OnAttachTo);
		L.RegFunction("OnDetachFrom", OnDetachFrom);
		L.RegFunction("OnUpdate", OnUpdate);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Id", get_Id, null);
		L.RegVar("EntityAssetName", get_EntityAssetName, null);
		L.RegVar("Handle", get_Handle, null);
		L.RegVar("EntityGroup", get_EntityGroup, null);
		L.RegVar("Logic", get_Logic, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			GameFramework.Entity.IEntityGroup arg2 = (GameFramework.Entity.IEntityGroup)ToLua.CheckObject<GameFramework.Entity.IEntityGroup>(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			object arg4 = ToLua.ToVarObject(L, 6);
			obj.OnInit(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnRecycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			obj.OnRecycle();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.OnShow(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnHide(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.OnHide(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnAttached(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			GameFramework.Entity.IEntity arg0 = (GameFramework.Entity.IEntity)ToLua.CheckObject<GameFramework.Entity.IEntity>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.OnAttached(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDetached(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			GameFramework.Entity.IEntity arg0 = (GameFramework.Entity.IEntity)ToLua.CheckObject<GameFramework.Entity.IEntity>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.OnDetached(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnAttachTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			GameFramework.Entity.IEntity arg0 = (GameFramework.Entity.IEntity)ToLua.CheckObject<GameFramework.Entity.IEntity>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.OnAttachTo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDetachFrom(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			GameFramework.Entity.IEntity arg0 = (GameFramework.Entity.IEntity)ToLua.CheckObject<GameFramework.Entity.IEntity>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			obj.OnDetachFrom(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.Entity));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.OnUpdate(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Id(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)o;
			int ret = obj.Id;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Id on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EntityAssetName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)o;
			string ret = obj.EntityAssetName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EntityAssetName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Handle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)o;
			object ret = obj.Handle;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Handle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EntityGroup(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)o;
			GameFramework.Entity.IEntityGroup ret = obj.EntityGroup;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index EntityGroup on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Logic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.Entity obj = (UnityGameFramework.Runtime.Entity)o;
			UnityGameFramework.Runtime.EntityLogic ret = obj.Logic;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Logic on a nil value");
		}
	}
}

