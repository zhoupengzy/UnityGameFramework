//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameFramework_WebRequest_WebRequestSuccessEventArgsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameFramework.WebRequest.WebRequestSuccessEventArgs), typeof(GameFramework.GameFrameworkEventArgs));
		L.RegFunction("Create", Create);
		L.RegFunction("Clear", Clear);
		L.RegFunction("GetWebResponseBytes", GetWebResponseBytes);
		L.RegFunction("New", _CreateGameFramework_WebRequest_WebRequestSuccessEventArgs);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("SerialId", get_SerialId, null);
		L.RegVar("WebRequestUri", get_WebRequestUri, null);
		L.RegVar("UserData", get_UserData, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameFramework_WebRequest_WebRequestSuccessEventArgs(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameFramework.WebRequest.WebRequestSuccessEventArgs obj = new GameFramework.WebRequest.WebRequestSuccessEventArgs();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameFramework.WebRequest.WebRequestSuccessEventArgs.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			object arg3 = ToLua.ToVarObject(L, 4);
			GameFramework.WebRequest.WebRequestSuccessEventArgs o = GameFramework.WebRequest.WebRequestSuccessEventArgs.Create(arg0, arg1, arg2, arg3);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.WebRequest.WebRequestSuccessEventArgs obj = (GameFramework.WebRequest.WebRequestSuccessEventArgs)ToLua.CheckObject(L, 1, typeof(GameFramework.WebRequest.WebRequestSuccessEventArgs));
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWebResponseBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameFramework.WebRequest.WebRequestSuccessEventArgs obj = (GameFramework.WebRequest.WebRequestSuccessEventArgs)ToLua.CheckObject(L, 1, typeof(GameFramework.WebRequest.WebRequestSuccessEventArgs));
			byte[] o = obj.GetWebResponseBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SerialId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.WebRequest.WebRequestSuccessEventArgs obj = (GameFramework.WebRequest.WebRequestSuccessEventArgs)o;
			int ret = obj.SerialId;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SerialId on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WebRequestUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.WebRequest.WebRequestSuccessEventArgs obj = (GameFramework.WebRequest.WebRequestSuccessEventArgs)o;
			string ret = obj.WebRequestUri;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index WebRequestUri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserData(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameFramework.WebRequest.WebRequestSuccessEventArgs obj = (GameFramework.WebRequest.WebRequestSuccessEventArgs)o;
			object ret = obj.UserData;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserData on a nil value");
		}
	}
}

