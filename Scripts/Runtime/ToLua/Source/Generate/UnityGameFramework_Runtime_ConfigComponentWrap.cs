//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_ConfigComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.ConfigComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("EnsureCachedBytesSize", EnsureCachedBytesSize);
		L.RegFunction("FreeCachedBytes", FreeCachedBytes);
		L.RegFunction("ReadData", ReadData);
		L.RegFunction("ParseData", ParseData);
		L.RegFunction("HasConfig", HasConfig);
		L.RegFunction("GetBool", GetBool);
		L.RegFunction("GetInt", GetInt);
		L.RegFunction("GetFloat", GetFloat);
		L.RegFunction("GetString", GetString);
		L.RegFunction("AddConfig", AddConfig);
		L.RegFunction("RemoveConfig", RemoveConfig);
		L.RegFunction("RemoveAllConfigs", RemoveAllConfigs);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Count", get_Count, null);
		L.RegVar("CachedBytesSize", get_CachedBytesSize, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnsureCachedBytesSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EnsureCachedBytesSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FreeCachedBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
			obj.FreeCachedBytes();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				obj.ReadData(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int>(L, 3))
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.ReadData(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<object>(L, 3))
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.ReadData(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.ReadData(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ConfigComponent.ReadData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.ParseData(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				bool o = obj.ParseData(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, object>(L, 2))
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool o = obj.ParseData(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], object>(L, 2))
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool o = obj.ParseData(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				bool o = obj.ParseData(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				bool o = obj.ParseData(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ConfigComponent.ParseData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasConfig(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				bool o = obj.GetBool(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				bool o = obj.GetBool(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ConfigComponent.GetBool");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				int o = obj.GetInt(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int o = obj.GetInt(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ConfigComponent.GetInt");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				float o = obj.GetFloat(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				float o = obj.GetFloat(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ConfigComponent.GetFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				string o = obj.GetString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				string o = obj.GetString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.ConfigComponent.GetString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			string arg4 = ToLua.CheckString(L, 6);
			bool o = obj.AddConfig(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.RemoveConfig(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllConfigs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.ConfigComponent));
			obj.RemoveAllConfigs();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CachedBytesSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.ConfigComponent obj = (UnityGameFramework.Runtime.ConfigComponent)o;
			int ret = obj.CachedBytesSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CachedBytesSize on a nil value");
		}
	}
}

