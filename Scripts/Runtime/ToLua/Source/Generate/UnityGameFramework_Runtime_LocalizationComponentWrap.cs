//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityGameFramework_Runtime_LocalizationComponentWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityGameFramework.Runtime.LocalizationComponent), typeof(UnityGameFramework.Runtime.GameFrameworkComponent));
		L.RegFunction("EnsureCachedBytesSize", EnsureCachedBytesSize);
		L.RegFunction("FreeCachedBytes", FreeCachedBytes);
		L.RegFunction("ReadData", ReadData);
		L.RegFunction("ParseData", ParseData);
		L.RegFunction("GetString", GetString);
		L.RegFunction("HasRawString", HasRawString);
		L.RegFunction("GetRawString", GetRawString);
		L.RegFunction("RemoveRawString", RemoveRawString);
		L.RegFunction("RemoveAllRawStrings", RemoveAllRawStrings);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Language", get_Language, set_Language);
		L.RegVar("SystemLanguage", get_SystemLanguage, null);
		L.RegVar("DictionaryCount", get_DictionaryCount, null);
		L.RegVar("CachedBytesSize", get_CachedBytesSize, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnsureCachedBytesSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.EnsureCachedBytesSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FreeCachedBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			obj.FreeCachedBytes();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				string arg0 = ToLua.CheckString(L, 2);
				obj.ReadData(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int>(L, 3))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.ReadData(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<object>(L, 3))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				string arg0 = ToLua.CheckString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.ReadData(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.ReadData(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.LocalizationComponent.ReadData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ParseData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.ParseData(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				bool o = obj.ParseData(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, object>(L, 2))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool o = obj.ParseData(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<byte[], object>(L, 2))
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				bool o = obj.ParseData(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				bool o = obj.ParseData(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				object arg3 = ToLua.ToVarObject(L, 5);
				bool o = obj.ParseData(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityGameFramework.Runtime.LocalizationComponent.ParseData");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasRawString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HasRawString(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRawString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetRawString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveRawString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.RemoveRawString(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllRawStrings(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)ToLua.CheckObject(L, 1, typeof(UnityGameFramework.Runtime.LocalizationComponent));
			obj.RemoveAllRawStrings();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Language(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			GameFramework.Localization.Language ret = obj.Language;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Language on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SystemLanguage(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			GameFramework.Localization.Language ret = obj.SystemLanguage;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SystemLanguage on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DictionaryCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			int ret = obj.DictionaryCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DictionaryCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CachedBytesSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			int ret = obj.CachedBytesSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CachedBytesSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Language(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityGameFramework.Runtime.LocalizationComponent obj = (UnityGameFramework.Runtime.LocalizationComponent)o;
			GameFramework.Localization.Language arg0 = (GameFramework.Localization.Language)ToLua.CheckObject(L, 2, typeof(GameFramework.Localization.Language));
			obj.Language = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Language on a nil value");
		}
	}
}

